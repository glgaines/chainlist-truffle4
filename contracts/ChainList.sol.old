pragma solidity ^0.4.18;

contract ChainList {
  //state variables
  address seller;
  address buyer;
  string name;
  string description;
  uint256 price;

  //events
  event LogSellArticle(
    address indexed _seller,
    string _name,
    string _description,
    uint256 _price
  );
  event LogBuyArticle(
    address indexed _seller,
    address indexed _buyer,
    string _name,
    uint256 _price
  );
  //contructor
  /* function ChainList() public {
    sellArticle("Default article", "this is a default", 100000000000000000);
  } */

  function sellArticle(string _name, string _description, uint256 _price) public {
    seller = msg.sender;
    name = _name;
    description = _description;
    price =  _price;

    LogSellArticle(seller, name, description, price);
  }

  function getArticle() public view returns(
    address _seller,
    address _buyer,
    string _name,
    string _description,
    uint256 _price
    ) {
      return(seller, buyer, name, description, price);
  }

  function buyArticle() payable public {
    //is article for sale?
    require(seller != 0x0);
    // article has not been sold
    require(buyer == 0x0);
    require(msg.sender != seller);
    require(msg.value == price);

    //keep track of _buyer
    buyer = msg.sender;
    // buyer pays the seller
    seller.transfer(msg.value);
    //triger the event
    LogBuyArticle(seller, buyer, name, price);
  }
}
