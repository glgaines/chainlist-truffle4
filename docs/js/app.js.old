App = {
     web3Provider: null,
     contracts: {},
     account: 0x0,

     init: function() {
       //load articles
       // var articlesRow = $('#articlesRow');
       // var articleTemplate = $('#articleTemplate');
       //
       // articleTemplate.find('.panel-title').text('article 1');
       // articleTemplate.find('.article-description').text('Description for article 1');
       // articleTemplate.find('.article-price').text('10.23');
       // articleTemplate.find('.article-seller').text("0x12345678970123456789");
       //
       // articlesRow.append(articleTemplate.html());

       return App.initWeb3();
     },

     initWeb3: function() {
       if(typeof web3 !== 'undefined') {
         //reuse the provider of the web3 that is injected by metamash
         console.log("1")
         App.web3Provider = web3.currentProvider;
       } else {
         console.log("2")
         //create a new provider and plug into local currentProvider - running ganache
         App.web3Provider = new Web3.providers.HttpProvider('http://localhost:7545');
       }
       web3 = new Web3(App.web3Provider);

       App.displayAccountInfo();

       return App.initContract();
     },

     displayAccountInfo: function() {
       web3.eth.getCoinbase(function(err, account) {
         if(err === null) {
           App.account = account;
           $('#account').text(account);
           web3.eth.getBalance(account, function(err, balance) {
             if(err === null) {
               $('#accountBalance').text(web3.fromWei(balance, "ether") + " ETH");
             }
           })
         }
       });
     },

     initContract: function() {
       $.getJSON('ChainList.json', function(chainListArtifact) {
         // get the file - use to instantiate truffle contract abstraction
         App.contracts.ChainList = TruffleContract(chainListArtifact);
         //Set provider for contracts
         App.contracts.ChainList.setProvider(App.web3Provider);
         App.listenToEvents();
         // retreive the article from contract
         return App.reloadArticles();
       });
     },
     reloadArticles: function() {
       //refresh account info - balance might have changed.
       App.displayAccountInfo();
       //retrieve the article placeholder and clear..
       $('#articlesRow').empty();
       App.contracts.ChainList.deployed().then(function(instance) {
         return instance.getArticle();
       }).then(function(article) {
         console.log(article)
         if(article[0] == 0x0) {  //if no address of seller...
           //no article to display
           console.log("article[0] empty")
           return;
         }

         var price = web3.fromWei(article[4], "ether")
         // retrieve the article template and fill it
         var articleTemplate = $("#articleTemplate");
         articleTemplate.find('.panel-title').text(article[2]);
         articleTemplate.find('.article-description').text(article[3]);
         articleTemplate.find('.article-price').text(price);
         articleTemplate.find('btn-buy').attr('data-value', price);

         var seller = article[0];
         if (seller == App.account) {
           seller = "You";
         }
         articleTemplate.find('.article-seller').text(seller);
         //set up buyer
         var buyer = article[1];
         if(buyer == App.account) {
           buyer = "you";
         } else if(buyer == 0x0){
           buyer = "no one yet.";
         }

         articleTemplate.find('.article-buyer').text(buyer);

         // hide or show buyer button
         if (article[0] == App.account || article[1] != 0x0) {
           articleTemplate.find('.btn-buy').hide();
         } else {
           articleTemplate.find('btn-buy').show();
         }

         $('#articlesRow').append(articleTemplate.html());
       }).catch(function(err) {
         console.error(err.message);
       });
     },
     sellArticle: function() {
       console.log("selling 1")
       //retrieve the details from modal dialog
       var _article_name = $('#article_name').val();
       var _description = $('#article_description').val();
       var _price = web3.toWei(parseFloat($('#article_price').val() || 0), "ether");
console.log(_article_name, _description, _price)
       if((_article_name.trim() == "") || (_price == 0)) {
         console.log("nothing")
         //nothing to sell
         return false;
       }
       App.contracts.ChainList.deployed().then(function(instance) {
         console.log("deployed")
         return instance.sellArticle(_article_name, _description, _price, {
           from: App.account,
           gas: 500000
         });
       }).then(function(result) {
         //App.reloadArticles();
       }).catch(function(err) {
         console.log(err.message)
       });
     },
     //listen to events triggered by contract
     listenToEvents: function() {
       App.contracts.ChainList.deployed().then(function(instance) {
         instance.LogSellArticle({}, {}).watch(function(error, event) {
           if(!error) {
             $("#events").append('<li class="list-group-item">' + event.args._name + 'is now for sale</li>');
           } else {
             console.error(error);
           }
           App.reloadArticles();
         });
         instance.LogBuyArticle({}, {}).watch(function(error, event) {
           if(!error) {
             $("#events").append('<li class="list-group-item">' + event.args._buyer + ' bought ' + event.args._name + '</li>');
           } else {
             console.error(error);
           }
           App.reloadArticles();
         });
       })
     },

     buyArticle: function() {
       event.preventDefault();
       //retreive the article Price
       var _price = parseFloat($(event.target).data('value'));
       App.contracts.ChainList.deployed().then(function(instance) {
         return instance.buyArticle({
           from:App.account,
           value: web3.toWei(_price,"ether"),
           gas: 500000
         });
       }).catch(function(err) {
         console.error(err);
       });
     }
};

$(function() {
     $(window).load(function() {
          App.init();
     });
});
